; ************************************************************************************************
;       Programme: Remise en ordre de CHA√éNES de caract√®res.     version PEP813 sous Linux
;
;        Suite √  une demande √  l'utilisateur,le programme affiche en ordre 
;        ASCII croissant les cha√Ænes des caract√®res entr√©es.
;
;       auteur:         Charles Morin
;       code permanent: MORC28019804
;       courriel:       morin.charles.5@courrier.uqam.ca
;       date:           hiver 2019
;       cours:          INF2171
; ************************************************************************************************
;

;************************************************************************************************
;
;                                     T O  D O
;                                 ================
;
;                            1.   Quand ca commence par un espace
;                            2.   Quand ca fini par un nombre impair d'espace
;
;************************************************************************************************


;                            ; // Lit la liste (√  l'envers)

begin:   LDA     mLength,i   
         CALL    new         ;   X = new Maillon(); #mVal #mNext
         LDA     0,i
         CHARI   mVal,x      ;   X.val = getInt();
         LDBYTEA mVal,x
         CPA     '\n',i
         BREQ    end
         STA     avCaract,d
         LDA     head,d      
         STA     mNext,x     ;   X.next = head;
         STX     head,d      ;   head = X;
         LDA     cpt,d       
         ADDA    1,i         
         STA     cpt,d      
         STA     nbCaract,d

loop_in: LDA     avCaract,d
         CPA     ' ',i
         BREQ    avEspace
         LDA     nbCaract,d
         ADDA    1,i
         STA     nbCaract,d
         LDA     mLength,i   
         CHARI   mVal,d
         LDBYTEA mVal,d 
         CPA     '\n',i
         BREQ    findMin      
         ADDX    1,i
         STBYTEA mVal,x
         STA     avCaract,d
         BR      loop_in     ; } // fin for

avEspace:LDA     nbCaract,d
         ADDA    1,i
         STA     nbCaract,d
         CHARI   mVal,d
         LDBYTEA mVal,d
         CPA     '\n',i
         BREQ    findMin
         CPA     ' ',i
         BREQ    addTo       ; ajoute dans le maillon courrant 
         LDA     mLength,i   
         CALL    new         ;   X = new Maillon(); #mVal #mNext
         LDA     cpt,d       
         ADDA    1,i         
         STA     cpt,d       
         LDA     0,i
         LDBYTEA mVal,d
         STA     avCaract,d
         STBYTEA mVal,x
         LDA     head,d      
         STA     mNext,x     ;   X.next = head;
         STX     head,d      ;   head = X;
         BR      loop_in 

addTo:   LDBYTEA mVal,d      ; Ajouter au maillon present  
         STA     mVal,x
         STBYTEA mVal,x
         STA     avCaract,d
         ADDX    1,i
         LDA     nbCaract,d
         ADDA    1,i
         STA     nbCaract,d
         BR      loop_in     ; } // fin for
    
findMin: LDA     nbCaract,d
         CPA     28,i
         BRGE    setInval 
continu: LDX     head,d      
         STX     minAddr,d    
         LDBYTEA mVal,x     
         STA     minVal,d ; <-------------------------------------------
loop_out:CPX     0,i         
         BREQ    out         ; for (X=head; X!=null; X=X.next) {
         LDBYTEA mVal,x
         CPA     minVal,d
         BRLE    setMin
         LDX     mNext,x     
         BR      loop_out    ; } // fin for

setMin:  STA     minVal,d    ; <----------------------------------------
         STX     minAddr,d
         LDX     mNext,x     
         BR      loop_out

out:     LDA     cpt,d
         SUBA    1,i
         STA     cpt,d
         LDA     isInval,d
if:      CPA     1,i
         BREQ    and
         BR      else
and:     LDA     cpt,d
         CPA     0,i
         BREQ    invalide
else:    LDA     isInval,d
         CPA     1,i
         BREQ    continu
         CHARO   minVal2,d    ; <----------------------------------
         LDX     minAddr,d
         LDBYTEA 0xFF,i
         STBYTEA mVal,x
         LDA     cpt,d
         CPA     0,i
         BREQ    continu2
         CHARO   ' ',i
         CHARO   '-',i
         CHARO   '>',i
         CHARO   ' ',i
continu2:LDA     cpt,d
         CPA     0,i
         BRGT    findMin
         LDA     0,i
         LDX     0,i
         STA     isInval,d
         STA     nbCaract,d
         STA     cpt,d
         LDA     mLength,i 
         CHARO   '\n',i
         BR      begin

setInval:LDA     1,i
         STA     isInval,d
         BR      continu

invalide:STRO    erreur,d 
         LDA     0,i
         LDX     0,i
         STA     isInval,d
         STA     nbCaract,d
         STA     cpt,d
         LDA     mLength,i   
         CHARO   '\n',i
         BR      begin
         
end:     STOP                

;
; Variables
;
head:    .BLOCK  2           ; #2h tÍte de liste (null (aka 0) si liste vide)
minVal:  .BLOCK  1           ; #1h <------------------------------------------------
minVal2: .BLOCK  1           ; #1h <-----------------------------------------------
minAddr: .BLOCK  2           ; #2h     
head:    .BLOCK  2           ; #2h t√™te de liste (null (aka 0) si liste vide)
cpt:     .BLOCK  2           ; #2d compteur de boucle
avCaract:.BLOCK  2
isInval: .BLOCK  2           ; #2d
nbCaract:.BLOCK  2           ; #2d
tempA:   .BLOCK  2
isEnd:   .BLOCK  2

;
; Messages
;
bienvenu:.ASCII  "Bienvenu dans le programme de chaine\x00"
entrer:  .ASCII  "Entrez une ou plusieurs chaÓnes:\n\x00"
aurevoir:.ASCII  "\nMerci, ‡ la prochaine!\x00"
tiret:   .ASCII  "-------------------------------------------------------------------------\n\x00"
erreur:  .ASCII  "EntrÈe invalide\n\x00"
deborde: .ASCII  "Erreur dÈbordement\n\x00"

;
;******* Structure de liste d'entiers
; Une liste est constitu√©e d'une cha√Æne de maillons.
; Chaque maillon contient une valeur et l'adresse du maillon suivant
; La fin de la liste est marqu√©e arbitrairement par l'adresse 0
mVal:    .EQUATE 0          ; #1h26a valeur de l'√©l√©ment dans le maillon
mNext:   .EQUATE 26         ; #2h maillon suivant (null (aka 0) pour fin de liste)
mLength: .EQUATE 28         ; taille d'un maillon en octets
;
;
;******* operator new
;        Precondition: A contains number of bytes
;        Postcondition: X contains pointer to bytes
new:     LDX     hpPtr,d     ;returned pointer
         ADDA    hpPtr,d     ;allocate from heap
         STA     hpPtr,d     ;update hpPtr
         RET0                
hpPtr:   .ADDRSS heap        ;address of next free byte
heap:    .BLOCK  2           ;first byte in the heap

         .END                  
